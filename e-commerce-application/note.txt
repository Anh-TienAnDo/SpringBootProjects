@RequestBody
Trong Spring Boot, annotation @RequestBody được sử dụng để ánh xạ dữ liệu từ body của HTTP request vào một đối tượng Java. Khi bạn sử dụng @RequestBody UserDTO userDTO, Spring Boot sẽ tự động chuyển đổi dữ liệu JSON từ request body thành một đối tượng UserDTO. Dưới đây là chi tiết cách dữ liệu được đưa vào @RequestBody UserDTO userDTO:

Quá trình chi tiết:
HTTP Request:

Khi một HTTP request được gửi đến endpoint /media-socials/user với phương thức POST, dữ liệu JSON trong body của request sẽ được gửi đến server.
Ví dụ, request body có thể như sau:
Controller Method:

Phương thức createUser trong controller MediaSocialController được định nghĩa như sau:
Deserialization:

Khi request đến endpoint /media-socials/user, Spring Boot sẽ sử dụng Jackson (một thư viện JSON phổ biến) để chuyển đổi dữ liệu JSON trong request body thành một đối tượng UserDTO.
Jackson sẽ tìm kiếm các thuộc tính trong JSON và ánh xạ chúng vào các thuộc tính tương ứng trong class UserDTO.
Binding Data:

Jackson sẽ tạo một đối tượng UserDTO mới và gán các giá trị từ JSON vào các thuộc tính của đối tượng này bằng method set.
Ví dụ, giá trị "john_doe" từ JSON sẽ được gán vào thuộc tính username của UserDTO.
Controller Method Execution:

Sau khi đối tượng UserDTO được tạo và dữ liệu được gán vào, đối tượng này sẽ được truyền vào phương thức createUser.
Bạn có thể sử dụng đối tượng userDTO trong phương thức để xử lý dữ liệu, như lưu vào cơ sở dữ liệu, kiểm tra tính hợp lệ, v.v.


-------------------------
port 8080
api/media-socials/
    detail/{slug}
    filter/
    GET /api/media-socials/?_query=abc&_start=0&_limit=12_type=...
    search-filter/
api/categories/
api/authors/
api/producers/

Response({
            'status': 'Success',
            'message': 'Data retrieved successfully',
            'data': data
            'total': total,

        })  

